#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Tue Jun  6 12:17:44 2000
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn $env(SHELL)
match_max 100000
expect -exact "\[markh@rainbow engine\]\$ "
send -- "make\r"
expect -exact "make\r
gcc -I/aitools/include   -c -o cmdlock.o cmdlock.cc\r
gcc -I/aitools/include   -c -o filemgr.o filemgr.cc\r
gcc -I/aitools/include   -c -o kap-t.o kap-t.cc\r
kap-t.cc:21: warning: `dbg' redefined\r
parsedfile.hh:23: warning: this is the location of the previous definition\r
gcc -I/aitools/include   -c -o parsedfile.o parsedfile.cc\r
gcc -o kap-t cmdlock.o filemgr.o kap-t.o parsedfile.o -L/aitools/lib -ltcl8.3 -Wl,-rpath,/aitools/lib -ldl  -lieee -lm\r
\[markh@rainbow engine\]\$ "
send -- "su -\r"
expect -exact "su -\r
Password: "
send -- "samsung\r"
expect -exact "\r
\[root@rainbow /root\]# "
send -- "/aitools/apache/bin/apachectl stop\r"
expect -exact "/aitools/apache/bin/apachectl stop\r
/aitools/apache/bin/apachectl stop: httpd stopped\r
\[root@rainbow /root\]# "
send -- "exit\r"
expect -exact "exit\r
logout\r
\[H\[J\[markh@rainbow engine\]\$ "
send -- "cd ../mod_kap\r"
expect -exact "cd ../mod_kap\r
\[markh@rainbow mod_kap\]\$ "
send -- "make install\r"
expect -exact "make install\r
cp -p ../engine/kap-t /aitools/apache/libexec\r
/aitools/apache/bin/apxs -i -a -n 'kap' mod_kap.so\r
cp mod_kap.so /aitools/apache/libexec/mod_kap.so\r
chmod 755 /aitools/apache/libexec/mod_kap.so\r
\[activating module `kap' in /aitools/apache/conf/httpd.conf\]\r
\[markh@rainbow mod_kap\]\$ "
send -- "cd ../engine\r"
expect -exact "cd ../engine\r
\[markh@rainbow engine\]\$ "
send -- "su -\r"
expect -exact "su -\r
Password: "
send -- "samsung\r"
expect -exact "\r
\[root@rainbow /root\]# "
send -- "/aitools/apache/bin/apachectl start\r"
expect -exact "/aitools/apache/bin/apachectl start\r
/aitools/apache/bin/apachectl start: httpd started\r
\[root@rainbow /root\]# "
send -- "exit\r"
expect -exact "exit\r
logout\r
\[H\[J\[markh@rainbow engine\]\$ "
send -- ""
expect eof
